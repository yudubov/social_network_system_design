1. Для Web app и Mobile app отдельные BFF. Предоставляет именно те данные, которые нужны для конкретного интерфейса.
Если набор данных не отличается, то BFF не требуется.

2. Keykloak аутентифицирует и авторизует пользователей по данным из AD.

3. После успешной авторизации пользователя BFF выполняет поиск в Redis по постам золотых блогеров. 
3.1 Если данные найдены в кэше, то формируется ответ пользователю.
3.2 Данные не найдены в кэше, то запрос направляется к API Composition.

4. Composition собирает данные по подсистемам или в поисковой БД:
4.1.1 Если запрос полнотекстовый, то Composition делает запрос к Full-text search
4.1.2 Full-text search делает запрос к Elasticsearch
4.1.3 Elasticsearch возвращает Full-text search результаты поиска в релевантном порядке и id сущностей из PostgresQL.
4.1.4 Full-text search делает запросы к репликам БД (чтение): Posts, Comments, Subscribrion, Ratings и формирует ответ. Запросы только на чтение.
4.1.5 Full-text search формирует ответ и направляет Composition. (далее пользователь получит ответ через BFF и интерфейс через который был выполнен запрос)

4.2.1 Если запрос НЕ полнотекстовый, то Composition делает запрос к подсистемам: Posts, Comments, Subscribrion, Ratings. 
4.2.2 Подсистемы делают запросы к своим БД и формируют ответ Composition (далее пользователь получит ответ через BFF и интерфейс, через который был выполнен запрос)

5. Подсистемы: Posts, Comments, Subscribrion, Ratings. Имеют доступ к БД на запись и репликам на чтение. 

6. S3 хранилище фото - посты медиа.

7. Debezium 
7.1 Слушает изменения в БД Posts, Comments, Subscribrion, Rating.
7.2 Формирует эвенты в кафку в отдельные топики.

8. AdpaterDB слушает эвенты кафки от Debezium
8.1 Формирует ответы для актуализации данных в БД: Elasticsearch, ClickHouse, Redis. 

9. Redis хранит данные для кэша. 

10. Elasticsearch хранит данные для полнотекстового поиска.

11. ClickHouse хранит данные для построения аналитических отчетов.