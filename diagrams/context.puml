
@startuml
!include <C4/C4_Container>
Person_Ext(user, "Пользователь", "Управляет постами")
Person(user_a, "Аналитик данных", "Читает данные БД")

System_Boundary(online_store, "Social network for travellers") {
Container(web_app, "Web app", "JavaScript/React", "Интерфейс для пользователей (тонкий клиент)")
Container(mobile_app, "Mobile app", "Kotlin", "Приложение для Android/iOS (тонкий клиент)")
Container(comp, "Composition API", "Kotlin/Temporal", "Агрегатор запросов (Monitoring, Retry)")
Container(bff_m, "BFF Mobile", "Kotlin/Spring Boot", "Обработка запросов мобильной версии (Аутентификация, Ratelimits)")
Container(bff_w, "BFF Web app", "Kotlin/Spring Boot", "Обработка запросов веб-версии (Аутентификация, Ratelimits)")
Container(comment, "Comment", "Java/Spring Boot", "Обработка бизнес-логики")
ContainerDb(pg_p, "posts_meta БД", "PostgreSQL", "Хранение постов META")
ContainerDb(pg_c, "comments БД", "PostgreSQL", "Хранение комментариев")  
ContainerDb(ad, "Active Directory", "Хранение УЗ пользователей")
ContainerDb(pg_r, "raitings БД", "PostgreSQL", "Хранение оценок")  
ContainerDb(pg_s, "subscriptions БД", "PostgreSQL", "Хранение подписок")    
ContainerDb(pg_s3, "Bucket S3", "Selectel", "Хранение постов MEDIA")  

 Container(full, "Full-text search", "Обработк полнотекстовых запросов")
  
Container(deb, "Debezium", "Java", "CDC Отслеживает изменения в БД и передает в Kafka")
Container(adapter_db, "Adapter DB", "Kotlin/Temporal", "Адаптер для синхронизации БД")
  
Container(kaf, "Kafka", "Java/Scala", "Отслеживает изменений в БД")    
ContainerDb(es, "Elasticsearch", "Java", "БД и поисковая система")    
ContainerDb(ch, "ClickHouse", "Java", "БД OLAP")    
  
Container(post, "Posts", "Kotlin/Spring Boot", "Подсистема постов")
Container(comment, "Comments", "Kotlin/Spring Boot", "Подсистема комментариев")  
Container(rai, "Ratings", "Kotlin/Spring Boot", "Подсистема оценок")  
Container(sub, "Subscribtions", "Kotlin/Spring Boot", "Подсистема подписок")  
  
Container(redis, "Redis кэш", "С", "Посты золотых блогеров")
Container(kk, "Keycloak", "Java", "Управление доступом") 
}

Rel(user, web_app, "Читает и публикует посты, ставит оценки и комментирует")
Rel(user, mobile_app, "Читает и публикует посты, ставит оценки и комментирует")

Rel(user_a, ch, "Выполняет сложные аналитические запросы")

Rel(web_app, bff_w, "HTTPS/REST API")
Rel(mobile_app, bff_m, "HTTPS/REST API")

Rel(bff_w, redis, "Читает",  "gRPC")
Rel(bff_m, redis, "Читает",  "gRPC")

Rel(bff_w, kk, "gRPC")
Rel(bff_m, kk, " gRPC")
Rel(kk, ad, "LDAP")

Rel(bff_w, comp, "Если не найднено в кэше", "gRPC")
Rel(bff_m, comp, "Если не найднено в кэше", "gRPC")

Rel(comp, comment, "gRPC")
Rel(comment, pg_c, "JDBC")

Rel(comp, post, "gRPC")
Rel(post, pg_p, "JDBC")

Rel(comp, rai, "gRPC")
Rel(rai, pg_r, "JDBC")

Rel(comp, sub, "gRPC")
Rel(sub, pg_s, "JDBC")

Rel(comp, full, "Полнотекстовый поиск",  "gRPC")
Rel(full, es, "Полнотекстовый поиск",  "gRPC")

Rel(full, pg_c, "JDBC")
Rel(full, pg_s, "JDBC")
Rel(full, pg_r, "JDBC")
Rel(full, pg_p, "JDBC")

Rel(post, pg_s3, "JDBC")
Rel(deb, kaf, "HTTPS/REST API")
Rel(deb, pg_c, "JDBC")
Rel(deb, pg_s, "JDBC")
Rel(deb, pg_r, "JDBC")
Rel(deb, pg_p, "JDBC")

Rel(adapter_db, es, "gRPC")
Rel(adapter_db, ch, "gRPC")
Rel(adapter_db, redis, "gRPC")
Rel(adapter_db, kaf, "HTTPS/REST API")


@enduml

